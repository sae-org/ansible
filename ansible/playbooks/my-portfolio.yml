--- 
- name: Prep Ubuntu instances && Deploy container from ECR
  hosts: tag_Name_my_portfolio_dev_ec2
  become: yes 
  gather_facts: no
  vars_files:
    - group_vars/all/vault.yml
  vars: 
    ansible_ssh_private_key_file: ~/.ssh/managed_hosts/my-portfolio.pem

  tasks:
    - name: Compute registry from vault vars
      set_fact:
        registry: "{{ aws_account_id }}.dkr.ecr.{{ aws_region }}.amazonaws.com"

    - name: Compute image_ref from vault vars
      set_fact:
        image_ref: "{{ registry }}/{{ ecr_repo_my_portfolio }}:{{ image_tag }}"

    - name: Ensure base packages
      apt:
        name:
          - python3
          - python3-pip
          - docker.io
          - unzip
          - curl 
          - ca-certificates
        state: present
        update_cache: yes

    - name: Install Docker Python SDK from apt (Ubuntu)
      apt:
        name: python3-docker
        state: present
        update_cache: yes

    - name: Enable & start Docker
      service:
        name: docker
        state: started
        enabled: yes

    - name: Download AWS CLI v2 bundle
      get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: /tmp/awscliv2.zip
        mode: '0644'

    - name: Unpack AWS CLI v2 bundle
      unarchive:
        src: /tmp/awscliv2.zip
        dest: /tmp
        remote_src: true

    - name: Install / update AWS CLI v2
      command: /tmp/aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
      args:
        creates: /usr/local/bin/aws

    - name: Get ECR login password
      command: "aws ecr get-login-password --region {{ aws_region }}"
      register: ecr_pwd
      changed_when: false

    - name: Docker login to ECR
      community.docker.docker_login:
        registry_url: "{{ registry }}"
        username: AWS
        password: "{{ ecr_pwd.stdout }}"
      changed_when: false

    - name: Pull image
      community.docker.docker_image:
        name: "{{ image_ref }}"
        source: pull

    - name: Run/replace container
      community.docker.docker_container:
        name: "{{ container_name_my_portfolio }}"
        image: "{{ image_ref }}"
        state: started
        recreate: true
        restart_policy: always
        published_ports:
          - "{{ host_port }}:{{ container_port }}"   